services:
    app:
        build:
            args:
                user: www
                uid: 1000
            context: .
            dockerfile: Dockerfile
        image: laravel-app
        container_name: app
        restart: unless-stopped
        working_dir: /var/www/
        depends_on:
            - db
            - app-setup
        volumes:
            - ../src/:/var/www
        networks:
            - app-network

    app-setup:
        image: laravel-app
        pull_policy: never
        container_name: app-setup
        restart: no
        tty: true
        working_dir: /var/www/
        depends_on:
            - db
        volumes:
            - ../src/:/var/www
        command:
            - /bin/sh
            - -c
            - |
                composer install
                php artisan migrate --force
        networks:
            - app-network

    app-scheduler-worker:
        image: laravel-app
        pull_policy: never
        container_name: app-scheduler-worker
        restart: unless-stopped
        tty: true
        working_dir: /var/www/
        depends_on:
            - app-setup
            - db
        volumes:
            - ../src/:/var/www
        entrypoint: php artisan schedule:work
        networks:
            - app-network

    app-octane:
        image: laravel-app
        pull_policy: never
        container_name: app-octane
        restart: unless-stopped
        tty: true
        working_dir: /var/www/
        expose:
            - 8081
        depends_on:
            - app-setup
            - db
        volumes:
            - ../src/:/var/www
        entrypoint: php artisan octane:start --port=8081
        networks:
            - app-network

    app-queue-default-worker:
        image: laravel-app
        pull_policy: never
        deploy:
            mode: replicated
            replicas: 5
        restart: unless-stopped
        tty: true
        working_dir: /var/www/
        depends_on:
            - app-setup
            - db
        volumes:
            - ../src/:/var/www
        entrypoint: php artisan queue:work --queue=default --max-time=1800 --timeout=3600
        networks:
            - app-network

    db:
        image: postgres:17.2
        container_name: db-app
        restart: unless-stopped
        environment:
            POSTGRES_DB: "app"
            POSTGRES_USER: "user"
            POSTGRES_PASSWORD: "pass"
        volumes:
            - ./postgres/data:/var/lib/postgresql/data
        ports:
            - "5432:5432"
        networks:
            - app-network

    pgadmin:
        container_name: pgadmin_container
        image: dpage/pgadmin4:8.13
        environment:
            PGADMIN_DEFAULT_EMAIL: "habrpguser@habr.com"
            PGADMIN_DEFAULT_PASSWORD: "pgadminpwd4habr"
            PGADMIN_CONFIG_SERVER_MODE: "False"
        volumes:
            - ./postgres/data:/var/lib/postgresql/data
        ports:
            - "5050:80"
        restart: unless-stopped
        deploy:
            resources:
                limits:
                    cpus: '0.5'
                    memory: 1G
        networks:
            - app-network

    nginx:
        image: nginx:alpine
        container_name: app-webserver
        restart: unless-stopped
        ports:
            - "8180:80"
            - "8080:8080"
        volumes:
            - ../src/:/var/www
            - ./config/nginx/conf.d:/etc/nginx/conf.d/
        healthcheck:
            test: curl -f http://localhost/up || exit 1
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - app-network

    frontend:
        build:
            context: .
            dockerfile: Dockerfile-frontend
        container_name: frontend
        restart: always
        working_dir: /app
        command:
            - /bin/sh
            - -c
            - |
               bun install
               bunx vite --host=0.0.0.0
        volumes:
            - ../frontend:/app
        ports:
            - "5173:5173"
        networks:
            - app-network
networks:
    app-network:
      driver: bridge
